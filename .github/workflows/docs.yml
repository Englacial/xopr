name: Build and Deploy Jupyter Book

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write
  pull-requests: write  # Added for PR comments

concurrency:
  group: "pages"
  cancel-in-progress: false

env:
  BASE_URL: /xopr

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v4
    
    - name: Set up Python
      run: uv python install 3.12
    
    - name: Install dependencies
      run: |
        uv sync --extra test --extra stac
    
    - name: Install package in development mode
      run: |
        uv pip install -e .
    
    - name: Run tests with pytest
      run: |
        uv run pytest --cov=xopr --cov-report=html --cov-report=xml --cov-report=term
    
    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: ./htmlcov

  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v4

    - name: Set up Python
      run: uv python install

    - name: Install dependencies
      run: uv sync --extra docs

    - name: Build Jupyter Book
      run: |
        cd docs
        uv run --extra docs jupyter-book build --html --execute 2>&1 | tee jupyter-book-build.log
        # Check for errors running the notebooks and fail if any are found
        if grep -r "Error\\|Exception\\|Traceback" jupyter-book-build.log; then
          echo "Found execution errors in build"
          exit 1
        fi

    - name: Download coverage artifacts
      uses: actions/download-artifact@v4
      with:
        name: coverage-report
        path: ./coverage-temp

    - name: Copy coverage to docs build
      run: |
        mkdir -p docs/_build/html/coverage
        cp -r ./coverage-temp/* docs/_build/html/coverage/
    
    # Copy map assets for polar map functionality
    - name: Copy map assets
      run: |
        if [ -d "src/xopr/map" ]; then
          echo "Copying map assets from src/xopr/map..."
          mkdir -p docs/_build/html/_static/maps
          cp -f src/xopr/map/polar.html docs/_build/html/_static/maps/ 2>/dev/null || true
          cp -f src/xopr/map/parquet_wasm.js docs/_build/html/_static/maps/ 2>/dev/null || true
          cp -f src/xopr/map/parquet_wasm_bg.wasm docs/_build/html/_static/maps/ 2>/dev/null || true
          cp -f src/xopr/map/*.parquet docs/_build/html/_static/maps/ 2>/dev/null || true
          echo "Map assets copied successfully"
        else
          echo "Warning: src/xopr/map directory not found, skipping map assets"
        fi
    
    # Upload artifact for all builds (PR and main)
    - name: Upload docs artifact
      uses: actions/upload-artifact@v4
      with:
        name: docs-html-${{ github.sha }}
        path: docs/_build/html
        retention-days: 7

    - name: Setup Pages
      uses: actions/configure-pages@v5
      if: github.ref == 'refs/heads/main'

    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      if: github.ref == 'refs/heads/main'
      with:
        path: docs/_build/html

  # Deploy PR Preview to Surge.sh
  pr-preview:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Download docs artifact
      uses: actions/download-artifact@v4
      with:
        name: docs-html-${{ github.sha }}
        path: ./docs-preview
    
    - name: Deploy to Surge.sh
      id: surge_deploy
      run: |
        npm install -g surge
        # Deploy with PR-specific URL
        SURGE_DOMAIN="xopr-pr-${{ github.event.pull_request.number }}.surge.sh"
        surge ./docs-preview $SURGE_DOMAIN --token ${{ secrets.SURGE_TOKEN }} || echo "::warning::Surge deployment failed. You may need to set up SURGE_TOKEN secret."
        echo "surge_url=https://$SURGE_DOMAIN" >> $GITHUB_OUTPUT
      continue-on-error: true
    
    - name: Comment on PR
      uses: actions/github-script@v7
      with:
        script: |
          const prNumber = context.issue.number;
          const sha = context.sha.substring(0, 7);
          const artifactUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${{ github.run_id }}`;
          
          let body = `## 📚 Documentation Preview Ready!\n\n`;
          
          // Check if Surge deployment succeeded
          const surgeUrl = '${{ steps.surge_deploy.outputs.surge_url }}';
          if (surgeUrl && !surgeUrl.includes('::warning::')) {
            body += `### 🌐 Live Preview\n**URL:** ${surgeUrl}\n\n`;
          } else {
            body += `### ⚠️ Surge.sh deployment not configured\nTo enable live previews, [set up a SURGE_TOKEN secret](https://github.com/${context.repo.owner}/${context.repo.repo}/settings/secrets/actions)\n\n`;
          }
          
          body += `### 📦 Download Preview\n`;
          body += `You can download the preview artifact [here](${artifactUrl}) for local viewing.\n\n`;
          body += `**Commit:** \`${sha}\`\n\n`;
          body += `---\n*This preview will be updated automatically with new commits.*`;
          
          // Find and update existing comment or create new one
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: prNumber
          });
          
          const botComment = comments.find(comment => 
            comment.user.login === 'github-actions[bot]' && 
            comment.body.includes('Documentation Preview Ready')
          );
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: body
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: body
            });
          }

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4